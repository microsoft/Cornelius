diff --git a/tdx-module-1.5.01-pc/src/common/memory_handlers/keyhole_manager.c b/tdx-module-1.5.01-pc/src/common/memory_handlers/keyhole_manager.c
index 1817273..cee0509 100644
--- a/tdx-module-1.5.01-pc/src/common/memory_handlers/keyhole_manager.c
+++ b/tdx-module-1.5.01-pc/src/common/memory_handlers/keyhole_manager.c
@@ -48,6 +48,18 @@ _STATIC_INLINE_ uint16_t keyhole_idx_from_la(uint64_t la)
     return keyhole_idx;
 }
 
+static uint64_t cornelius_move_hkid(uint64_t pa)
+{
+    tdx_module_global_t* global_data = get_global_data();
+    uint16_t hkid;
+
+    hkid = (uint16_t)((pa & global_data->hkid_mask) >> global_data->hkid_start_bit);
+    pa = pa & ~(global_data->hkid_mask);
+    pa |= ((uint64_t)hkid << 30ULL); // 1GB
+
+    return pa;
+}
+
 static void fill_keyhole_pte(uint16_t keyhole_idx, uint64_t pa, bool_t is_writable, bool_t is_wb_memtype)
 {
     uint64_t lp_keyhole_edit_base = get_sysinfo_table()->keyhole_edit_rgn_base +
@@ -56,6 +68,8 @@ static void fill_keyhole_pte(uint16_t keyhole_idx, uint64_t pa, bool_t is_writab
     ia32e_pxe_t* pte_p = (ia32e_pxe_t*)(lp_keyhole_edit_base + (uint64_t)((uint32_t)keyhole_idx * sizeof(ia32e_pxe_t)));
     ia32e_pxe_t new_pte;
 
+    pa = cornelius_move_hkid(pa);
+
     new_pte.raw = (uint64_t)0;
 
     new_pte.fields_4k.addr = (pa >> 12);
diff --git a/tdx-module-1.5.01-pc/src/common/accessors/ia32_accessors.h b/tdx-module-1.5.01-pc/src/common/accessors/ia32_accessors.h
index 1817273..cee0509 100644
--- a/tdx-module-1.5.01-pc/src/common/accessors/ia32_accessors.h
+++ b/tdx-module-1.5.01-pc/src/common/accessors/ia32_accessors.h
@@ -117,12 +117,14 @@
 _STATIC_INLINE_ uint64_t ia32_rdmsr(uint64_t addr)
 {
     uint32_t low,high;
+    addr |= 0x0ABC0000ULL; // See REAL_MSR_NUMBER() in Cornelius
     _ASM_VOLATILE_ ("rdmsr" : "=a"(low), "=d"(high) : "c"(addr));
     return (uint64_t)((((uint64_t)(high)) << 32) | (uint64_t)(low));
 }
 
 _STATIC_INLINE_ void ia32_wrmsr(uint64_t addr, uint64_t value)
 {
+    addr |= 0x0ABC0000ULL; // See REAL_MSR_NUMBER() in Cornelius
     _ASM_VOLATILE_ ("wrmsr" : : "a"((uint32_t)value), "d"((uint32_t)(value >> 32)), "c"(addr));
 }
 
@@ -134,6 +136,7 @@
 {
     uint64_t fault_indicator;
 
+    addr |= 0x0ABC0000ULL; // See REAL_MSR_NUMBER() in Cornelius
     _ASM_VOLATILE_ ("movq $" STR(FAULT_SAFE_MAGIC_INDICATOR) ", %%rsi \n"
                     "wrmsr \n"
                             : "=S"(fault_indicator)
